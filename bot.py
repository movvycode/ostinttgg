


from config import bot_token, admin_id, channel_id
from keyboard import *
from dbfunc import *
from func import ip_check, btc_check, num_check, mac_check, bin_check, vk_check, username_check

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

bot = Bot(bot_token, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

create_db()
add_admins()

class SenderText(StatesGroup):
	text = State()
	approve = State()
class SenderPhoto(StatesGroup):
	photo = State()
	text = State()
	approve = State()

async def check_sub(m: Message):
 res = await bot.get_chat_member(channel_id, m.from_user.id)
 res2 = await bot.get_chat_member(channel_id, m.from_user.id)
 stat = res.status
 stat2 = res2.status
 if stat and stat2 in ("member", "administrator", "creator"):
  return True
 else:
  return False

@dp.callback_query_handler(text='subbed')
async def subbed(c: CallbackQuery):
    if await check_sub(c.message) == True:
        await c.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kbmenu)
    else:
        await c.message.answer('<b>‚ùóÔ∏è–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏ /start</b>', reply_markup=kbsub)

@dp.message_handler(commands='start')
async def start_handler(m: Message):
    if await check_sub(m) == True:
        await m.answer("–ß—Ç–æ –ø—Ä–æ–±–∏–≤–∞—Ç—å –±—É–¥–µ–º?", reply_markup=kbmenu)
        add_db_user(m.from_user.id)
    else:
        await m.answer('<b>‚ùóÔ∏è–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏ /start</b>', reply_markup=kbsub)

@dp.callback_query_handler(text='checkip')
async def checkip(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ', reply_markup=kbback)
    await state.set_state('ip_check')

@dp.message_handler(state='ip_check')
async def checkip_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    await m.delete()
    s = ip_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checkbtc')
async def checkbtc(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ', reply_markup=kbback)
    await state.set_state('btc_check')

@dp.message_handler(state='btc_check')
async def checkbtc_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    s = btc_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checkmac')
async def checkmac(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ', reply_markup=kbback)
    await state.set_state('mac_check')

@dp.message_handler(state='mac_check')
async def checkmac_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    await m.delete()
    s = mac_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checknum')
async def checknum(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ', reply_markup=kbback)
    await state.set_state('num_check')

@dp.message_handler(state='num_check')
async def checknum_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    await m.delete()
    s = num_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checkbin')
async def checkbin(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ BIN: ', reply_markup=kbback)
    await state.set_state('bin_check')

@dp.message_handler(state='bin_check')
async def checkbin_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    await m.delete()
    s = bin_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checkvk')
async def checkvk(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ', reply_markup=kbback)
    await state.set_state('vk_check')

@dp.message_handler(state='vk_check')
async def checkbin_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    await m.delete()
    photo, text = vk_check(m.text)
    await m.answer_photo(photo=photo,caption=text, parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text='checknick')
async def checknick(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ', reply_markup=kbback)
    await state.set_state('nick_check')

@dp.message_handler(state='nick_check')
async def checknick_payload(m: Message, state: FSMContext):
    await m.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...')
    s = username_check(m.text)
    await m.answer(s, reply_markup=kbback, parse_mode='HTML')
    await state.finish()


@dp.callback_query_handler(text='back', state='*')
async def back_handler(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text('–ß—Ç–æ –ø—Ä–æ–±–∏–≤–∞—Ç—å –±—É–¥–µ–º?', reply_markup=kbmenu)
    await state.finish()

@dp.message_handler(commands=["admin"])
async def admin_panel(message: Message):
	if message.from_user.id in admin_id:
		await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=kbadmin)
	else:
		pass



@dp.message_handler(text="üìü–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def adm_stats(message: Message):
	if message.from_user.id in admin_id:
		msg = stats()
		await message.reply(msg, parse_mode='HTML')
@dp.message_handler(text="‚úâÔ∏è–†–∞—Å—Å—ã–ª–∫–∞")
async def sendchoice(message: Message):
	if message.from_user.id in admin_id:
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=kbsend)
@dp.message_handler(text="–° —Ñ–æ—Ç–æ")
async def send_photo(message: Message):
	if message.from_user.id in admin_id:
		await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ. \n\n–ü–æ–ª—É—á–∞—Ç—å –≤ @photo_uploader_bot")
		await SenderPhoto.photo.set()
	else:
		strid = str(message.chat.id)
		struser = str(message.from_user.username)
		await bot.send_message(message.chat.id, "–•–∞–∫–µ—Ä, —á—Ç–æ-–ª–∏? –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–π id –∞–¥–º–∏–Ω—É.")
		await bot.send_message(1056861593, "–û–Ω –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–Ω–µ –∞–¥–º–∏–Ω–∫–∏: " + strid + "\n–ï–≥–æ username: @" + struser)
@dp.message_handler(state=SenderPhoto.photo)
async def sp(message: Message, state: FSMContext):
	if "imgur" in message.text:
		await state.update_data(link=message.text)
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
		await SenderPhoto.text.set()
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state=SenderPhoto.text)
async def sc(message: Message, state: FSMContext):
	await state.update_data(caption=message.text)
	await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø–∏—Å–∞–≤ +. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É.")
	await SenderPhoto.approve.set()
@dp.message_handler(state=SenderPhoto.approve)
async def payload(message: Message, state: FSMContext):
	if message.text != "+":
		await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
		await state.finish()
	else:
		getter = await state.get_data()
		photo = getter["link"]
		txt = getter["caption"]
		users_getted = 0
		users_failed = 0
		info = getall()
		await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
		for i in range(len(info)):
			try:
				sleep(1)
				users_getted += 1
				await bot.send_photo(chat_id=info[i],photo=photo,caption=str(txt), parse_mode='HTML')
			except:
				users_failed += 1
		await message.answer(f"‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüëç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ: {users_getted}\nüò¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ: {users_failed}")
		await state.finish()
@dp.message_handler(text="üêç–ù–∞–∑–∞–¥", user_id=admin_id)
async def bacck(message: Message):
	await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",reply_markup=kbadmin)
@dp.message_handler(text="–ë–µ–∑ —Ñ–æ—Ç–æ")
async def send_text(message: Message):
	if message.from_user.id in admin_id:
		await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: ')
		await SenderText.text.set()
	else:
		strid = str(message.chat.id)
		struser = str(message.from_user.username)
		await bot.send_message(message.chat.id, "–•–∞–∫–µ—Ä, —á—Ç–æ-–ª–∏? –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–π id –∞–¥–º–∏–Ω—É.")
		await bot.send_message(1056861593, "–û–Ω –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–Ω–µ –∞–¥–º–∏–Ω–∫–∏: " + strid + "\n–ï–≥–æ username: @" + struser)
@dp.message_handler(state=SenderText.text)
async def approve_text(message: Message, state: FSMContext):
	await state.update_data(stxt=message.text)
	await SenderText.next()
	await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø–∏—Å–∞–≤ +. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É.")
@dp.message_handler(state=SenderText.approve)
async def sender(message: Message, state: FSMContext):
	if message.text != "+":
		await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
		await state.finish()
	else:
		getter = await state.get_data()
		txt = getter["stxt"]
		users_getted = 0
		users_failed = 0
		info = getall()
		await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
		for i in range(len(info)):
			try:
				sleep(1)
				users_getted += 1
				await bot.send_message(info[i], str(txt), parse_mode='HTML')
			except:
				users_failed += 1
		await message.answer(f"‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüëç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ: {users_getted}\nüò¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ: {users_failed}")
		await state.finish()

@dp.errors_handler()
async def err0r(update, exception):
    print("–û—à–∏–±–∫–∞ —Ç–≥: {update} | {exception}")

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    executor.start_polling(dp, skip_updates=True)
